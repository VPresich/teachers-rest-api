{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.2",
    "title": "API for React Task Pro application",
    "description": "REST API for managing users, boards, columns, tasks in React Task Pro application",
    "license": {
      "name": "Lingo Teachers project",
      "url": "https://github.com/VPresich/teachers-rest-api"
    }
  },
  "consumes": ["multipart/form-data", "application/json"],
  "produces": ["application/json"],
  "servers": [{ "url": "http://localhost:8080/api" }],
  "tags": [
    {
      "name": "Users",
      "description": "User authorization endpoints. Register a new user, log in a user, logout the user, refresh user session, and update user profile."
    },
    {
      "name": "Teachers",
      "description": "Get teachers."
    },
    {
      "name": "Help",
      "description": "Send email"
    },
    {
      "name": "Backgrounds",
      "description": "Get backgrounds"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Users"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration's object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/RegistrationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful registration",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorInRequest"
                }
              }
            }
          },
          "409": {
            "description": "Email in use",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/EmailInUse"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Users"],
        "summary": "User login",
        "parameters": [],
        "requestBody": {
          "description": "User login credentials",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/RegistrationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorInRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/BadLoginResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Users"],
        "summary": "User logout",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Empty request body",
          "content": {},
          "required": false
        },
        "responses": {
          "204": {
            "description": "No content",
            "content": [{}]
          },
          "401": {
            "description": "Unauthorized (invaild or missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorUnauthorizedResponse"
                }
              }
            }
          }
        }
      }
    },

    "/users/current": {
      "get": {
        "tags": ["Users"],
        "summary": "Refresh user information",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true
          }
        ],

        "requestBody": {
          "description": "Empty request body",
          "content": {},
          "required": false
        },

        "responses": {
          "200": {
            "description": "User refresh successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/CurrentUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorUnauthorizedResponse"
                }
              }
            }
          }
        }
      }
    },

    "/users/avatar": {
      "get": {
        "tags": ["Users"],
        "summary": "Get user avatar Url",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Empty request body",
          "content": {},
          "required": false
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/AvatarResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invaild or missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorUnauthorizedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/avatars": {
      "patch": {
        "tags": ["Users"],
        "summary": "Update avatar of current user",
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true
          }
        ],
        "requestBody": {
          "description": "Update avatar",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAvatarRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AvatarResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorUnauthorizedResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "patch": {
        "summary": "Update user information",
        "tags": ["Users"],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Updated user information",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/UpdateProfileRequest"
              },
              "example": {
                "name": "string",
                "email": "user@example.com",
                "password": "user@example.com",
                "theme": "light"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User information updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/CurrentUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorInRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorUnauthorizedResponse"
                }
              }
            }
          },
          "409": {
            "description": "Email in use for another user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/EmailInUse"
                }
              }
            }
          }
        }
      }
    },

    "/users/google": {
      "get": {
        "summary": "Redirect to Google OAuth",
        "description": "Redirects the user to Google's OAuth 2.0 authentication page.",
        "tags": ["Users"],
        "responses": {
          "302": {
            "description": "Redirect to Google OAuth",
            "headers": {
              "Location": {
                "description": "URL to redirect the user to Google's OAuth 2.0 authentication page.",
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/google-redirect": {
      "get": {
        "summary": "Google OAuth Redirect",
        "description": "Handles the redirection from Google's OAuth 2.0 authentication page and processes the authentication code.",
        "tags": ["Users"],
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": true,
            "description": "Authorization code returned by Google OAuth 2.0",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to frontend with JWT token",
            "headers": {
              "Location": {
                "description": "URL to redirect the user to the frontend application with JWT token.",
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorInRequest"
                }
              }
            }
          }
        }
      }
    },

    "/teachers": {
      "get": {
        "tags": ["Teachers"],
        "summary": "Get all teachers",
        "parameters": [],
        "requestBody": {
          "description": "Empty request body",
          "content": {},
          "required": false
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeacherResponse"
                  }
                }
              }
            }
          }
        }
      }
    },

    "/teachers/{id}": {
      "get": {
        "summary": "Get a teacher by its ID",
        "description": "Retrieve information about a specific teacher by its ID.",
        "tags": ["Teachers"],

        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the teacher to retrieve.",
            "schema": {
              "type": "string",
              "example": "6691060d059f7e247d62a77a"
            }
          }
        ],
        "requestBody": {
          "description": "Empty request body",
          "content": {},
          "required": false
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved teacher details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeacherResponse"
                }
              }
            }
          },
          "404": {
            "description": "Teacher not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Teacher not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/helps": {
      "post": {
        "summary": "Create a new help request",
        "tags": ["Help"],
        "parameters": [
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "$ref": "#/components/schemas/HelpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Help request created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "description": "Help request received"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body or parameters)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorInRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invaild or missing token)",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "$ref": "#/components/schemas/ErrorUnauthorizedResponse"
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email"
          },
          "password": {
            "type": "string",
            "description": "User's password"
          }
        }
      },

      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email"
          },
          "password": {
            "type": "string",
            "description": "User's password"
          }
        }
      },

      "securitySchemes": {
        "Bearer": {
          "type": "http",
          "scheme": "bearer",
          "bearerFormat": "JWT"
        }
      },

      "UpdateProfileRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email"
          },
          "password": {
            "type": "string",
            "format": "email",
            "description": "User's password"
          },
          "theme": {
            "type": "string",
            "description": "User's theme",
            "enum": ["light", "dark", "violet"]
          }
        }
      },

      "UpdateAvatarRequest": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "format": "binary",
            "description": "User's avatar file"
          }
        },
        "required": ["avatar"]
      },

      "HelpRequest": {
        "type": "object",
        "required": ["email", "text"],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email"
          },
          "text": {
            "type": "string",
            "description": "User's message"
          }
        }
      },

      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "token": {
            "description": "JWT token for authentication",
            "type": "string"
          },
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "example": "test1970"
              },
              "email": {
                "type": "string",
                "format": "email",
                "example": "test1970@test1970.com"
              },
              "avatarURL": {
                "type": "string",
                "format": "uri",
                "example": "https://res.cloudinary.com/dirtbd4yk/image/upload/v1717687717/def-avatar-light_1x_fkwy6u.jpg"
              },
              "theme": {
                "type": "string",
                "example": "light"
              }
            }
          }
        }
      },

      "CurrentUserResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User's email"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar URL"
          },
          "theme": {
            "type": "string",
            "description": "User's theme",
            "enum": ["light", "dark", "violet"]
          }
        }
      },

      "AvatarResponse": {
        "type": "object",
        "properties": {
          "avatarURL": {
            "type": "string",
            "description": "User's avatar URL"
          }
        }
      },

      "TeacherResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The teacher ID"
          },
          "name": {
            "type": "string",
            "example": "Sophie"
          },
          "surname": {
            "type": "string",
            "example": "Davis"
          },
          "languages": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "English",
                "German",
                "Spanish",
                "French",
                "Mandarin Chinese",
                "Italian",
                "Korean",
                "Vietnamese"
              ]
            },
            "example": ["English", "Spanish"]
          },
          "levels": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "A1 Beginner",
                "A2 Elementary",
                "B1 Intermediate",
                "B2 Upper-Intermediate",
                "C1 Advanced",
                "C2 Proficient"
              ]
            },
            "example": [
              "A1 Beginner",
              "A2 Elementary",
              "B1 Intermediate",
              "B2 Upper-Intermediate"
            ]
          },
          "rating": {
            "type": "number",
            "example": 4.9
          },
          "reviews": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "reviewer_name": {
                  "type": "string",
                  "example": "Oliver"
                },
                "reviewer_rating": {
                  "type": "number",
                  "example": 5
                },
                "comment": {
                  "type": "string",
                  "example": "Sophie is an excellent teacher. Her lessons are engaging and effective."
                }
              }
            }
          },
          "price_per_hour": {
            "type": "number",
            "example": 27
          },
          "lessons_done": {
            "type": "number",
            "example": 1265
          },
          "avatar_url": {
            "type": "string",
            "example": "https://ftp.goit.study/img/avatars/25.jpg"
          },
          "lesson_info": {
            "type": "string",
            "example": "Lessons focus on building language skills through interactive activities and practical exercises."
          },
          "conditions": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "Teaches adults and teenagers (16 years and above)."
            }
          },
          "experience": {
            "type": "string",
            "example": "Sophie has been teaching English and Spanish for 6 years. She has a strong command of both languages and is dedicated to helping her students achieve their language learning goals. Sophie's teaching approach emphasizes engaging and effective lessons that incorporate interactive activities and practical exercises. Her lessons are designed to build language skills, improve fluency, and enhance communication abilities. With her patient and supportive teaching style, Sophie creates a positive and productive learning environment for her students."
          }
        }
      },

      "BackgroundResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The background ID"
          },
          "imgUrl_desktop_2x": {
            "type": "string",
            "description": "URL for desktop image 2x"
          },
          "imgUrl_desktop_1x": {
            "type": "string",
            "description": "URL for desktop image 1x"
          },
          "imgUrl_mobile_1x": {
            "type": "string",
            "description": "URL for mobile image 1x"
          },
          "imgUrl_mobile_2x": {
            "type": "string",
            "description": "URL for mobile image 2x"
          },
          "imgUrl_tablet_1x": {
            "type": "string",
            "description": "URL for tablet image 1x"
          },
          "imgUrl_tablet_2x": {
            "type": "string",
            "description": "URL for tablet image 2x"
          },
          "label": {
            "type": "string",
            "description": "Label image URL"
          }
        },
        "example": {
          "_id": "665dab40d37019ad00137c09",
          "imgUrl_desktop_2x": "https://res.cloudinary.com/dirtbd4yk/image/upload/v1718033987/theme01_desktop_2x_vpsnlj.jpg",
          "imgUrl_desktop_1x": "https://res.cloudinary.com/dirtbd4yk/image/upload/v1718033986/theme01_desktop_1x_brzmfg.jpg",
          "imgUrl_mobile_1x": "https://res.cloudinary.com/dirtbd4yk/image/upload/v1718040177/theme01_mobile_1x_xqz8kb.jpg",
          "imgUrl_mobile_2x": "https://res.cloudinary.com/dirtbd4yk/image/upload/v1718040182/theme01_mobile_2x_eah6jm.jpg",
          "imgUrl_tablet_1x": "https://res.cloudinary.com/dirtbd4yk/image/upload/v1718038720/theme01_tablet_1x_yin395.jpg",
          "imgUrl_tablet_2x": "https://res.cloudinary.com/dirtbd4yk/image/upload/v1718038720/theme01_tablet_2x_s1glrh.jpg",
          "label": "https://res.cloudinary.com/dirtbd4yk/image/upload/v1718041846/vector-01_wvpiqx.jpg"
        }
      },

      "ErrorUnauthorizedResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "example": {
          "message": "Not authorized"
        }
      },

      "ErrorInRequest": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "example": {
          "message": "Error message"
        }
      },

      "EmailInUse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "example": {
          "message": "Email in use"
        }
      },

      "BadLoginResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "example": {
          "message": "Email or password is wrong"
        }
      }
    }
  }
}
